// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using PostgresTester.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace PostgresTester.Models
{
    public partial class NorthwindContext
    {
        private INorthwindContextProcedures _procedures;

        public virtual INorthwindContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new NorthwindContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public INorthwindContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CustOrderHistResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<EmployeeSalesbyCountryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SalesbyYearResult>().HasNoKey().ToView(null);
        }
    }

    public partial class NorthwindContextProcedures : INorthwindContextProcedures
    {
        private readonly NorthwindContext _context;

        public NorthwindContextProcedures(NorthwindContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CustOrderHistResult>> CustOrderHistAsync(string CustomerID, OutputParameter<string> ProductName, , CancellationToken cancellationToken = default)
        {
            var parameterProductName = new NpgsqlParameter
            {
                Size = ,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ProductName?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar,
            };
            var parameterQuantity = new NpgsqlParameter
            {
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Quantity?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Integer,
            };

            var npgsqlParameters = new []
            {
                new NpgsqlParameter
                {
                    Size = ,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar,
                },
                parameterProductName,
                parameterQuantity,
            };
            var _ = await _context.SqlQueryAsync<CustOrderHistResult>("SELECT * FROM "public"."CustOrderHist" $1, $2 OUTPUT, $3 OUTPUT", npgsqlParameters, cancellationToken);

            ProductName.SetValue(parameterProductName.Value);

            return _;
        }

        public virtual async Task<List<EmployeeSalesbyCountryResult>> EmployeeSalesbyCountryAsync(DateTime? Beginning_Date, DateTime? Ending_Date, OutputParameter<string> Country, OutputParameter<string> LastName, OutputParameter<string> FirstName, OutputParameter<DateTime?> ShippedDate, OutputParameter<int?> OrderID, , CancellationToken cancellationToken = default)
        {
            var parameterCountry = new NpgsqlParameter
            {
                Size = ,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Country?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar,
            };
            var parameterLastName = new NpgsqlParameter
            {
                Size = ,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = LastName?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar,
            };
            var parameterFirstName = new NpgsqlParameter
            {
                Size = ,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FirstName?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar,
            };
            var parameterShippedDate = new NpgsqlParameter
            {
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ShippedDate?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Timestamp,
            };
            var parameterOrderID = new NpgsqlParameter
            {
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = OrderID?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Integer,
            };
            var parameterSubtotal = new NpgsqlParameter
            {
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Subtotal?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Double,
            };

            var npgsqlParameters = new []
            {
                new NpgsqlParameter
                {
                    Value = Beginning_Date ?? Convert.DBNull,
                    SqlDbType = NpgsqlTypes.NpgsqlDbType.Timestamp,
                },
                new NpgsqlParameter
                {
                    Value = Ending_Date ?? Convert.DBNull,
                    SqlDbType = NpgsqlTypes.NpgsqlDbType.Timestamp,
                },
                parameterCountry,
                parameterLastName,
                parameterFirstName,
                parameterShippedDate,
                parameterOrderID,
                parameterSubtotal,
            };
            var _ = await _context.SqlQueryAsync<EmployeeSalesbyCountryResult>("SELECT * FROM "public"."Employee Sales by Country" $1, $2, $3 OUTPUT, $4 OUTPUT, $5 OUTPUT, $6 OUTPUT, $7 OUTPUT, $8 OUTPUT", npgsqlParameters, cancellationToken);

            Country.SetValue(parameterCountry.Value);
            LastName.SetValue(parameterLastName.Value);
            FirstName.SetValue(parameterFirstName.Value);
            ShippedDate.SetValue(parameterShippedDate.Value);
            OrderID.SetValue(parameterOrderID.Value);

            return _;
        }

        public virtual async Task<List<SalesbyYearResult>> SalesbyYearAsync(DateTime? Beginning_Date, DateTime? Ending_Date, OutputParameter<DateTime?> ShippedDate, OutputParameter<int?> OrderID, OutputParameter<double?> Subtotal, , CancellationToken cancellationToken = default)
        {
            var parameterShippedDate = new NpgsqlParameter
            {
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ShippedDate?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Timestamp,
            };
            var parameterOrderID = new NpgsqlParameter
            {
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = OrderID?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Integer,
            };
            var parameterSubtotal = new NpgsqlParameter
            {
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Subtotal?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Double,
            };
            var parameterYear = new NpgsqlParameter
            {
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Year?._value ?? Convert.DBNull,
                SqlDbType = NpgsqlTypes.NpgsqlDbType.Integer,
            };

            var npgsqlParameters = new []
            {
                new NpgsqlParameter
                {
                    Value = Beginning_Date ?? Convert.DBNull,
                    SqlDbType = NpgsqlTypes.NpgsqlDbType.Timestamp,
                },
                new NpgsqlParameter
                {
                    Value = Ending_Date ?? Convert.DBNull,
                    SqlDbType = NpgsqlTypes.NpgsqlDbType.Timestamp,
                },
                parameterShippedDate,
                parameterOrderID,
                parameterSubtotal,
                parameterYear,
            };
            var _ = await _context.SqlQueryAsync<SalesbyYearResult>("SELECT * FROM "public"."Sales by Year" $1, $2, $3 OUTPUT, $4 OUTPUT, $5 OUTPUT, $6 OUTPUT", npgsqlParameters, cancellationToken);

            ShippedDate.SetValue(parameterShippedDate.Value);
            OrderID.SetValue(parameterOrderID.Value);
            Subtotal.SetValue(parameterSubtotal.Value);

            return _;
        }
    }
}
